// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: purchase.sql

package db

import (
	"context"
)

const createPurchase = `-- name: CreatePurchase :one
INSERT INTO purchase (
  user_id,
  product_id,
  store_name,
  amount,
  status
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING purchase_id, user_id, product_id, store_name, amount, status, purchase_time, created_at, updated_at
`

type CreatePurchaseParams struct {
	UserID    int32
	ProductID int32
	StoreName string
	Amount    string
	Status    string
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) (Purchase, error) {
	row := q.db.QueryRowContext(ctx, createPurchase,
		arg.UserID,
		arg.ProductID,
		arg.StoreName,
		arg.Amount,
		arg.Status,
	)
	var i Purchase
	err := row.Scan(
		&i.PurchaseID,
		&i.UserID,
		&i.ProductID,
		&i.StoreName,
		&i.Amount,
		&i.Status,
		&i.PurchaseTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPurchase = `-- name: GetPurchase :one
SELECT purchase_id, user_id, product_id, store_name, amount, status, purchase_time, created_at, updated_at FROM purchase WHERE purchase_id = $1
`

func (q *Queries) GetPurchase(ctx context.Context, purchaseID int32) (Purchase, error) {
	row := q.db.QueryRowContext(ctx, getPurchase, purchaseID)
	var i Purchase
	err := row.Scan(
		&i.PurchaseID,
		&i.UserID,
		&i.ProductID,
		&i.StoreName,
		&i.Amount,
		&i.Status,
		&i.PurchaseTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
