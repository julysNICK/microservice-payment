// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: credit_card.sql

package db

import (
	"context"
	"time"
)

const createCreditCard = `-- name: CreateCreditCard :one
INSERT INTO credit_card (user_id, number, balance, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, number, balance, created_at, updated_at
`

type CreateCreditCardParams struct {
	UserID    int32
	Number    string
	Balance   int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateCreditCard(ctx context.Context, arg CreateCreditCardParams) (CreditCard, error) {
	row := q.db.QueryRowContext(ctx, createCreditCard,
		arg.UserID,
		arg.Number,
		arg.Balance,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreditCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Number,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCreditCardByUserID = `-- name: GetCreditCardByUserID :one
SELECT id, user_id, number, balance, created_at, updated_at FROM credit_card WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCreditCardByUserID(ctx context.Context, userID int32) (CreditCard, error) {
	row := q.db.QueryRowContext(ctx, getCreditCardByUserID, userID)
	var i CreditCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Number,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
