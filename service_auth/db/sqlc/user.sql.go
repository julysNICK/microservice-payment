// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, cpf,password, created_at, updated_at) VALUES ($1, $2,  $3, $4, $5) RETURNING id, email, cpf,password, created_at, updated_at
`

type CreateUserParams struct {
	Email     string
	Cpf       string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Cpf,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Cpf,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, password, cpf, email, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

type GetUserByUsernameRow struct {
	ID        int32
	Password  string
	Cpf       string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserByUsername(ctx context.Context, email string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, email)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Cpf,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
